// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: protos/arith.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ArithmeticsService_Add_FullMethodName      = "/ArithmeticsService/Add"
	ArithmeticsService_Subtract_FullMethodName = "/ArithmeticsService/Subtract"
	ArithmeticsService_Multiply_FullMethodName = "/ArithmeticsService/Multiply"
	ArithmeticsService_Divide_FullMethodName   = "/ArithmeticsService/Divide"
)

// ArithmeticsServiceClient is the client API for ArithmeticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArithmeticsServiceClient interface {
	Add(ctx context.Context, in *ArithmeticsRequest, opts ...grpc.CallOption) (*ArithmeticsResponse, error)
	Subtract(ctx context.Context, in *ArithmeticsRequest, opts ...grpc.CallOption) (*ArithmeticsResponse, error)
	Multiply(ctx context.Context, in *ArithmeticsRequest, opts ...grpc.CallOption) (*ArithmeticsResponse, error)
	Divide(ctx context.Context, in *ArithmeticsRequest, opts ...grpc.CallOption) (*ArithmeticsResponse, error)
}

type arithmeticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArithmeticsServiceClient(cc grpc.ClientConnInterface) ArithmeticsServiceClient {
	return &arithmeticsServiceClient{cc}
}

func (c *arithmeticsServiceClient) Add(ctx context.Context, in *ArithmeticsRequest, opts ...grpc.CallOption) (*ArithmeticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArithmeticsResponse)
	err := c.cc.Invoke(ctx, ArithmeticsService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticsServiceClient) Subtract(ctx context.Context, in *ArithmeticsRequest, opts ...grpc.CallOption) (*ArithmeticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArithmeticsResponse)
	err := c.cc.Invoke(ctx, ArithmeticsService_Subtract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticsServiceClient) Multiply(ctx context.Context, in *ArithmeticsRequest, opts ...grpc.CallOption) (*ArithmeticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArithmeticsResponse)
	err := c.cc.Invoke(ctx, ArithmeticsService_Multiply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticsServiceClient) Divide(ctx context.Context, in *ArithmeticsRequest, opts ...grpc.CallOption) (*ArithmeticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArithmeticsResponse)
	err := c.cc.Invoke(ctx, ArithmeticsService_Divide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArithmeticsServiceServer is the server API for ArithmeticsService service.
// All implementations must embed UnimplementedArithmeticsServiceServer
// for forward compatibility
type ArithmeticsServiceServer interface {
	Add(context.Context, *ArithmeticsRequest) (*ArithmeticsResponse, error)
	Subtract(context.Context, *ArithmeticsRequest) (*ArithmeticsResponse, error)
	Multiply(context.Context, *ArithmeticsRequest) (*ArithmeticsResponse, error)
	Divide(context.Context, *ArithmeticsRequest) (*ArithmeticsResponse, error)
	mustEmbedUnimplementedArithmeticsServiceServer()
}

// UnimplementedArithmeticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArithmeticsServiceServer struct {
}

func (UnimplementedArithmeticsServiceServer) Add(context.Context, *ArithmeticsRequest) (*ArithmeticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedArithmeticsServiceServer) Subtract(context.Context, *ArithmeticsRequest) (*ArithmeticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtract not implemented")
}
func (UnimplementedArithmeticsServiceServer) Multiply(context.Context, *ArithmeticsRequest) (*ArithmeticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedArithmeticsServiceServer) Divide(context.Context, *ArithmeticsRequest) (*ArithmeticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}
func (UnimplementedArithmeticsServiceServer) mustEmbedUnimplementedArithmeticsServiceServer() {}

// UnsafeArithmeticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArithmeticsServiceServer will
// result in compilation errors.
type UnsafeArithmeticsServiceServer interface {
	mustEmbedUnimplementedArithmeticsServiceServer()
}

func RegisterArithmeticsServiceServer(s grpc.ServiceRegistrar, srv ArithmeticsServiceServer) {
	s.RegisterService(&ArithmeticsService_ServiceDesc, srv)
}

func _ArithmeticsService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArithmeticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticsServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArithmeticsService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticsServiceServer).Add(ctx, req.(*ArithmeticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArithmeticsService_Subtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArithmeticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticsServiceServer).Subtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArithmeticsService_Subtract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticsServiceServer).Subtract(ctx, req.(*ArithmeticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArithmeticsService_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArithmeticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticsServiceServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArithmeticsService_Multiply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticsServiceServer).Multiply(ctx, req.(*ArithmeticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArithmeticsService_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArithmeticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticsServiceServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArithmeticsService_Divide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticsServiceServer).Divide(ctx, req.(*ArithmeticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArithmeticsService_ServiceDesc is the grpc.ServiceDesc for ArithmeticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArithmeticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ArithmeticsService",
	HandlerType: (*ArithmeticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ArithmeticsService_Add_Handler,
		},
		{
			MethodName: "Subtract",
			Handler:    _ArithmeticsService_Subtract_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _ArithmeticsService_Multiply_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _ArithmeticsService_Divide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/arith.proto",
}
